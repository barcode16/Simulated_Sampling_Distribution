}
plot_graph()
require(dplyr)
require(ggplot2)
data(mtcars)
names_var <- names(select(mtcars, -mpg))
plot_graph <- function() {
for(i in 1:length(names_var)){
z <- i+1
g <- ggplot(mtcars, aes(x = mtcars[, z], y = mpg)) +
geom_point(aes(colour = factor(am))) +
geom_smooth(method = "lm", aes(group = 1))+
xlab(names_var[i])
print(g)
}
}
plot_graph()
require(dplyr)
require(ggplot2)
data(mtcars)
names_var <- names(select(mtcars, -mpg))
plot_graph <- function() {
for(i in 1:length(names_var)){
g <- ggplot(mtcars, aes(x = mtcars[i+1], y = mpg)) +
geom_point(aes(colour = factor(am))) +
geom_smooth(method = "lm", aes(group = 1))+
xlab(names_var[i])
print(g)
}
}
plot_graph()
for(i in 1:length(names_var)){
g <- ggplot(mtcars, aes(x = mtcars[i+1], y = mpg)) +
geom_point(aes(colour = factor(am))) +
geom_smooth(method = "lm", aes(group = 1))+
xlab(names_var[i])
print(g)
}
for(i in 1:length(names_var)){
g <- ggplot(mtcars, aes(x = mtcars[, i+1], y = mpg)) +
geom_point(aes(colour = factor(am))) +
geom_smooth(method = "lm", aes(group = 1))+
xlab(names_var[i])
print(g)
}
names_var
for(i in 1:length(names_var)){
g <- ggplot(mtcars, aes(x = mtcars[, i+1], y = mpg)) +
geom_point(aes(colour = factor(am))) +
geom_smooth(method = "lm", aes(group = 1))+
xlab(names_var[i])
print(g)
}
length(mtcars)
for(i in 2:length(mtcars)){
g <- ggplot(mtcars, aes(x = mtcars[, i], y = mpg)) +
geom_point(aes(colour = factor(am))) +
geom_smooth(method = "lm", aes(group = 1))+
xlab(names_var[i-1])
print(g)
}
summary(mtcars)
require(dplyr)
require(ggplot2)
data(mtcars)
names_var <- names(select(mtcars, -mpg)
for(i in 2:length(mtcars)){
g <- ggplot(mtcars, aes(x = mtcars[, i], y = mpg)) +
geom_point(aes(colour = factor(am))) +
geom_smooth(method = "lm", aes(group = 1))+
xlab(names_var[i-1])
print(g)
}
require(dplyr)
require(ggplot2)
data(mtcars)
names_var <- names(select(mtcars, -mpg)
require(dplyr)
require(ggplot2)
data(mtcars)
names_var <- names(select(mtcars, -mpg))
require(dplyr)
require(ggplot2)
data(mtcars)
names_var <- names(select(mtcars, -mpg))
for(i in 2:length(mtcars)){
g <- ggplot(mtcars, aes(x = mtcars[, i], y = mpg)) +
geom_point(aes(colour = factor(am))) +
geom_smooth(method = "lm", aes(group = 1))+
xlab(names_var[i-1])
print(g)
}
require(dplyr)
require(ggplot2)
data(mtcars)
for(i in 2:length(mtcars)){
g <- ggplot(mtcars, aes(x = mtcars[, i], y = mpg)) +
geom_point(aes(colour = factor(am))) +
geom_smooth(method = "lm", aes(group = 1))
print(g)
}
require(dplyr)
require(ggplot2)
data(mtcars)
for(i in 2:length(mtcars)){
g <- ggplot(mtcars, aes(x = mtcars[, i], y = mpg)) +
geom_point(aes(colour = factor(am))) +
geom_smooth(method = "lm", aes(group = 1))+
xlab(name(mtcars[, i]))
print(g)
}
require(dplyr)
require(ggplot2)
data(mtcars)
for(i in 2:length(mtcars)){
g <- ggplot(mtcars, aes(x = mtcars[, i], y = mpg)) +
geom_point(aes(colour = factor(am))) +
geom_smooth(method = "lm", aes(group = 1))+
xlab(names(mtcars[, i]))
print(g)
}
names(mtcars[, i])
?colname
??colname
colnames(mtcars[, i])
colnames(mtcars[i])
require(dplyr)
require(ggplot2)
data(mtcars)
for(i in 2:length(mtcars)){
g <- ggplot(mtcars, aes(x = mtcars[, i], y = mpg)) +
geom_point(aes(colour = factor(am))) +
geom_smooth(method = "lm", aes(group = 1))+
xlab(colnames(mtcars[i]))
print(g)
}
require(dplyr)
require(ggplot2)
data(mtcars)
names_var <- names(select(mtcars, -mpg))
for(i in 1:length(names_var)){
g <- ggplot(mtcars, aes(x = mtcars[, i+1], y = mpg)) +
geom_point(aes(colour = factor(am))) +
geom_smooth(method = "lm", aes(group = 1))+
xlab(names_var[i])
print(g)
}
require(ggplot2)
for(i in 2:length(mtcars)){
g <- ggplot(mtcars, aes(x = mtcars[, i], y = mpg)) +
geom_point(aes(colour = factor(am))) +
geom_smooth(method = "lm", aes(group = 1))+
xlab(colnames(mtcars[i]))
print(g)
}
library(tidyr)
?gather
data <- mtcars
data2 <- gather(data, variable, value)
View(data2)
View(data)
data2 <- gather(data, variable, value, row.names = TRUE)
?row.names
data$model <- row.names(data)
View(data)
data2 <- gather(data, variable, value, mpg:carb)
View(data2)
library(tidyr)
data <- mtcars
data$model <- row.names(data)
data2 <- gather(data, variable, value, cyl:carb)
View(data2)
library(tidyr)
data <- mtcars
data$model <- row.names(data)
data2 <- gather(data, variable, value, cyl:carb)
ggplot(data2, aes(x=value, y = mpg))+
geom_point(aes(colour = factor(am))) +
geom_smooth(method = "lm", aes(group = 1))+
facet_wrap(~variable)
ggplot(data2, aes(x=value, y = mpg))+
geom_point() +
geom_smooth(method = "lm", aes(group = 1))+
facet_wrap(~variable)
ggplot(data2, aes(x=value, y = mpg))+
geom_point() +
geom_smooth(method = "lm", aes(group = 1))+
xlim(o,10)+
facet_wrap(~variable)
ggplot(data2, aes(x=value, y = mpg))+
geom_point() +
geom_smooth(method = "lm", aes(group = 1))+
xlim(0,10)+
facet_wrap(~variable)
ggplot(data2, aes(x=value, y = mpg))+
geom_point() +
geom_smooth(method = "lm", aes(group = 1))+
xlim(0,10)+
facet_wrap(~variable, scales = "free")
ggplot(data2, aes(x=value, y = mpg))+
geom_point() +
geom_smooth(method = "lm", aes(group = 1))+
facet_wrap(~variable, scales = "free")
?facet_wrap
ggplot(data2, aes(x=value, y = mpg))+
geom_point() +
geom_smooth(method = "lm", aes(group = 1))+
facet_wrap(~variable, scales = "free".ncol = 5)
ggplot(data2, aes(x=value, y = mpg))+
geom_point() +
geom_smooth(method = "lm", aes(group = 1))+
facet_wrap(~variable, scales = "free", ncol = 5)
library(tidyr)
mtcars$model <- row.names(mtcars)
mtc_long <- gather(mtcars, variable, value, cyl:carb)
ggplot(mtc_long, aes(x=value, y = mpg))+
geom_point() +
geom_smooth(method = "lm", aes(group = 1))+
facet_wrap(~variable, scales = "free", ncol = 5)
swirl()
3.5
expect_dice()
expect_dice(pmf)
expect_dice(6)
expect_dice
dice_high
expect_dice(dice_high)
expect_dice(dice_low)
.5*(edh+edl)
integrate(myfunc, o,2)
integrate(myfunc, 0,2)
spop
mean(spop)
allsam
apply(allsam, 1, mean)
man(smeans)
mean(smeans)
t.test(ToothGrowth$len[ToothGrowth$dose==1], ToothGrowth$len[ToothGrowth$dose==2],
paired = FALSE, var.equal = FALSE)
library(swirl)
swirl()
install_from_swirl("Regression Models")
swirl()
plot(child ~ parent, galton)
plot(jitter(child,4) ~ parent, galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd=3, col='red')
summary(regrline)
fit <- lm(child ~ parent, galton)
fit$residuals
summary(fit)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
p
est
lhs-rhs
all.equal(lhs, rhs)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- var(ols.Slope, ols.ic)
varEst <- var(ols.slope, ols.ic)
varEst <- var(est(ols.slope, ols.ic))
all.equal(varChild, varRes + varEst)
efit <- lm(accel ~ mag+dist, attenu)
mean(efit$residuals)
cov(efot$residuals, attenu$mag)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
cor(gpa_nor, gch_nor)
l_nor <- lm(gpa_nor ~ gch_nor)
l_nor <- lm(gch_nor ~ gpa_nor)
fit <- lm(child ~ parent, galton)
sqrt(sum(fit$residuals)/(928-2))
sqrt(sum(fit$residuals^2)/(928-2))
sqrt(sum(fit$residuals^2) / (n - 2))
summary(fit)$sigma
sqrt(deviance(fit)/(n-2))
mu <- mean(galton$child)
sTot <- sum((galton$child - mu)^2)
sRes <- deviance(galton$child, galton$parent)
;;
je
sRes <- deviance(galton$child, galton$parent)
sRes <- deviance(galton$child, galton$parent))
help
sRes <- deviance(fit)
1-(sRes/sTot)
1-sRes/sTot
(fit)$r
summary(fit)$r
summary(fit)$r.squared
cor(galton$child, galton$parent)
cor(galton$parent, galton$child)^2
x1 <- -3 # treated
x2 <- 1 ## placebo
s1 <- 1.5 ## treated
s2 <- 1.8 ## placebo
s <- sqrt(((n1-1) + s1^2 + (n21-1) + s2^2) / (n1+n2-2))
0
0
info()
bye()
n1 <- n2 <- 9
x1 <- -3 # treated
x2 <- 1 ## placebo
s1 <- 1.5 ## treated
s2 <- 1.8 ## placebo
s <- sqrt(((n1-1) + s1^2 + (n21-1) + s2^2) / (n1+n2-2))
s <- sqrt(((n1-1) + s1^2 + (n2-1) + s2^2) / (n1+n2-2))
s
s <- sqrt(((n1-1) + s1^2 + (n2-1) + s2^2) / (n1+n2-2))
(x1 - x2) + c(-1,1) + qt(0.95, n1 + n2 - 2) * s * sqrt(1/n1 + 1/n2)
s
s <- sqrt(((n1-1) * s1^2 + (n2-1) + s2^2) / (n1+n2-2))
(x1 - x2) + c(-1,1) + qt(0.95, n1 + n2 - 2) * s * sqrt(1/n1 + 1/n2)
s <- sqrt(((n1-1) * s1^2 + (n2-1) * s2^2) / (n1+n2-2))
(x1 - x2) + c(-1,1) * qt(0.95, n1 + n2 - 2) * s * sqrt(1/n1 + 1/n2)
(x1 - x2) + c(-1,1) * qt(0.95, n1 + n2 - 2) * s * sqrt(1/n1 + 1/n2)
qt(0.95, n1 + n2 - 2)
?qt
1.5^2 * (8) + 1.8^ * (8) / (16)
(1.5^2)*8
(1.5^2)*8 + 1.8^2 * (8) / (16)
((1.5^2)*8 + 1.8^2*(8)) / (16)
sq <- ((1.5^2)*8 + 1.8^2*(8)) / (16)
s <- sqrt(sq)
s
td <- qt(0.95, n1 + n2 - 2)
td * s * sqrt(1/n1 + 1/n2)
xdiff <- 4
cint <- td * s * sqrt(1/n1 + 1/n2)
xdiff + cint
xdiff - cint
xdiff <- -4
xdiff + cint
xdiff - cint
sq <- ((treated_sd^2)*(treatedsample_n - 1) + (placebo_sd^2*(placebosample_n - 1)) / (degrees of freedom, i.e. both samples_n - 2)
cint <- td * s * sqrt(1/n1 + 1/n2)
cint
cint2 <- td * sqrt(s^2/(16))
cint2
n1 <- n2 <- 9
x1 <- -3 # treated
x2 <- 1 ## placebo
s1 <- 1.5 ## treated SD
s2 <- 1.8 ## placebo SD
treated_mean <- -3 # treated
placebo_mean <- 1 ## placebo
treated_sd <- 1.5 ## treated SD
placebo_sd <- 1.8 ## placebo SD
placebo_sample <- 9
treated_sample <- 9
s_pooled_squared <- ((treated_sd^2)*(treatedsample_n - 1) + (placebo_sd^2*(placebosample_n - 1)) / (16)
s_pooled_squared <- ((treated_sd^2)*(treatedsample_n - 1) + (placebo_sd^2*(placebosample_n - 1)) / (16))
placebo_sd <- 1.8 ## placebo SD
placebo_sample_n <- 9
treated_sample_n <- 9
s_pooled_squared <- ((treated_sd^2)*(treatedsample_n - 1) + (placebo_sd^2*(placebosample_n - 1)) / (16))
placebosample_n <- 9
treatedsample_n <- 9
s_pooled_squared <- ((treated_sd^2)*(treatedsample_n - 1) + (placebo_sd^2*(placebosample_n - 1)) / (16))
s <- sqrt(sq)
s_pooled_squared <- ((treated_sd^2)*(treatedsample_n - 1) + (placebo_sd^2*(placebosample_n - 1))) / (16)
t = (treated_mean - placebo_mean) / (s_squared_pooled * sqrt(1/n1 + 1/n2))
s_squared_pooled <- ((treated_sd^2)*(treatedsample_n - 1) + (placebo_sd^2*(placebosample_n - 1))) / (16)
t = (treated_mean - placebo_mean) / (s_squared_pooled * sqrt(1/n1 + 1/n2))
?qt
s <- sqrt(s_squared_pooled)
s
cint <- td * s * sqrt(1/n1 + 1/n2)
xdiff + cint
xdiff - cint
td * s
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
install.packages("AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
grep("^Il*", names(predictors), value=TRUE)
grep("^Il", names(predictors), value=TRUE)
grep("^(Il)*", names(predictors), value=TRUE)
grep(^I^l)*", names(predictors), value=TRUE)
grep^Il[a-zA-Z0-9]+", names(predictors), value=TRUE)
grep(^Il[a-zA-Z0-9]+", names(predictors), value=TRUE)
grep(^Il[a-zA-Z0-9]+, names(predictors), value=TRUE)
grep("^Il[a-zA-Z0-9]+", names(predictors), value=TRUE)
grep("^Il$", names(predictors), value=TRUE)
grep("^Il", names(predictors), value=TRUE)
grep("^Il*", names(predictors), value=TRUE)
grep("^IL*", names(predictors), value=TRUE)
grep("^'IL'*", names(predictors), value=TRUE)
grep("^IL*", names(predictors), value=TRUE)
grep("^IL", names(predictors), value=TRUE)
select(predictors, starts_with("IL"))
library(dplyr)
select(predictors, starts_with("IL"))
names(select(predictors, starts_with("IL")))
names(select(predictors, starts_with("Il")))
grep("^Il", names(predictors), value=TRUE)
grep("^Il", names(predictors), value=TRUE)
library(dplyr)
ILonly <- select(predictors, starts_with("IL"))
names(ILonly)
install.packages(c("lme4", "manipulate", "maps", "rgl"))
intall_github('rCharts')
install_github('rCharts')
?install_github
?install.github
require(devtools)
install_github('rCharts', 'ramnathv')
install.packages("devtools")
require(devtools)
install_github('rCharts', 'ramnathv')
install.packages("Rtools")
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
install.packages("Rtools")
install.packages("Rtools")
install.packages("devtools")
install.packages("ggplot2", "ggvis")
library(ggplot2)
install.packages("dplyr", "tidyr")
install.packages("dplyr", "tidyr")
install.packages("rTools")
install.packages("rtools")
install.packages("dplyr")
install.packages("swirl")
q()
library(ggplot2)
install.packages("dplyr", "tidyr")
install.packages("dplyr", "tidyr")
install.packages("rtools")
install.packages("rTools")
install.packages("Rtools")
install.packages("devtools")
install_github('rCharts', 'ramnathv')
require(devtools)
install_github('rCharts', 'ramnathv')
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
require(Rtools)
install.packages(c("car", "gtools", "randomForest"))
getwd()
data <- diamonds
png("diamonds.png", width = 480, height = 480)
g <- ggplot(diamonds, aes(x=cut)) +
geom_bar()
dev.off()
?diamonds
library(ggplot2)
data <- diamonds
png("diamonds.png", width = 480, height = 480)
g <- ggplot(diamonds, aes(x=cut)) +
geom_bar()
dev.off()
png("diamonds.png", width = 480, height = 480)
g <- ggplot(diamonds, aes(x=cut)) +
geom_bar()
g
dev.off()
ggplot(diamonds, aes(x=cut)) +
geom_bar(colour = "red")
ggplot(diamonds, aes(x=cut)) +
geom_bar(col = "red")
ggplot(diamonds, aes(x=cut)) +
geom_bar(fill = "red")
png("diamonds.png", width = 480, height = 480)
ggplot(diamonds, aes(x=cut)) +
geom_bar(fill = "red")
dev.off()
?summarise
library(dplyr)
?summarise
?ggsave
library(ggplot2)
?ggsave
---
title       :
subtitle    :
author      :
job         :
framework   : io2012        # {io2012, html5slides, shower, dzslides, ...}
highlighter : highlight.js  # {highlight.js, prettify, highlight}
hitheme     : tomorrow      #
widgets     : []            # {mathjax, quiz, bootstrap}
mode        : selfcontained # {standalone, draft}
knit        : slidify::knit2slides
---
## Read-And-Delete
1. Edit YAML front matter
2. Write using R Markdown
3. Use an empty line followed by three dashes to separate slides!
--- .class #id
## Slide 2
library(slidify)
setwd("C:/Users/Michael/Desktop/R Working Directory/Slidify Project")
author("Slidify_CLT")
